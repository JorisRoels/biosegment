version: "3.7"
services:
    proxy:
        image: traefik:v2.2
        networks:
        - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        - default
        volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        ports:
            - "80:80"
            - "8090:8080"
        command:
            # Enable Docker in Traefik, so that it reads labels from Docker services
            - --providers.docker
            # Add a constraint to only use services with the label for this stack
            # from the env var TRAEFIK_TAG
            - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
            # Do not expose all Docker services, only the ones explicitly exposed
            - --providers.docker.exposedbydefault=false
            # Disable Docker Swarm mode for local development
            # - --providers.docker.swarmmode
            # Enable the access log, with HTTP requests
            - --accesslog
            # Enable the Traefik log, for configurations and errors
            - --log
            # Enable the Dashboard and API
            - --api
            # Enable the Dashboard and API in insecure mode for local development
            - --api.insecure=true
        labels:
            - traefik.enable=true
            - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
            - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80
        deploy:
            placement:
                constraints:
                - node.role == manager
            labels:
                # Enable Traefik for this service, to make it available in the public network
                - traefik.enable=true
                # Use the traefik-public network (declared below)
                - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
                # Use the custom label "traefik.constraint-label=traefik-public"
                # This public Traefik will only use services with this label
                - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
                # traefik-http set up only to use the middleware to redirect to https
                - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.scheme=https
                - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.permanent=true
                # Handle host with and without "www" to redirect to only one of them
                # Uses environment variable DOMAIN
                # To disable www redirection remove the Host() you want to discard, here and
                # below for HTTPS
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.entrypoints=http
                # traefik-https the actual router using HTTPS
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.entrypoints=https
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls=true
                # Use the "le" (Let's Encrypt) resolver created below
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls.certresolver=le
                # Define the port inside of the Docker service to use
                - traefik.http.services.${STACK_NAME?Variable not set}-proxy.loadbalancer.server.port=80
                # Handle domain with and without "www" to redirect to only one
                # To disable www redirection remove the next line
                - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
                # Redirect a domain with www to non-www
                # To disable it remove the next line
                - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
                # Redirect a domain without www to www
                # To enable it remove the previous line and uncomment the next
                # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
                # Middleware to redirect www, to disable it remove the next line 
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
                # Middleware to redirect www, and redirect HTTP to HTTPS
                # to disable www redirection remove the section: ${STACK_NAME?Variable not set}-www-redirect,
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.middlewares=${STACK_NAME?Variable not set}-www-redirect,${STACK_NAME?Variable not set}-https-redirect

    db:
        image: postgres:12
        volumes:
        - app-db-data:/var/lib/postgresql/data/pgdata
        env_file:
        - .env
        environment:
        - PGDATA=/var/lib/postgresql/data/pgdata
        deploy:
            placement:
                constraints:
                    - node.labels.${STACK_NAME?Variable not set}.app-db-data == true

    pgadmin:
        ports:
            - "5050:5050"
        image: dpage/pgadmin4
        networks:
        - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        - default
        depends_on:
        - db
        env_file:
        - .env
        deploy:
            labels:
                - traefik.enable=true
                - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
                - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
                - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-http.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)
                - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-http.entrypoints=http
                - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
                - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-https.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)
                - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-https.entrypoints=https
                - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-https.tls=true
                - traefik.http.routers.${STACK_NAME?Variable not set}-pgadmin-https.tls.certresolver=le
                - traefik.http.services.${STACK_NAME?Variable not set}-pgadmin.loadbalancer.server.port=5050

    queue:
        image: rabbitmq:3
        # Using the below image instead is required to enable the "Broker" tab in the flower UI:
        # image: rabbitmq:3-management
        #
        # You also have to change the flower command
    
    flower:
        ports:
            - "5555:5555"
        image: mher/flower
        networks:
        - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        - default
        env_file:
        - .env
        command:
        - "--broker=amqp://guest@queue:5672//"
        # For the "Broker" tab to work in the flower UI, uncomment the following command argument,
        # and change the queue service's image as well
        # - "--broker_api=http://guest:guest@queue:15672/api//"
        deploy:
            labels:
                - traefik.enable=true
                - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
                - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
                - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.rule=Host(`flower.${DOMAIN?Variable not set}`)
                - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.entrypoints=http
                - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
                - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.rule=Host(`flower.${DOMAIN?Variable not set}`)
                - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.entrypoints=https
                - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls=true
                - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls.certresolver=le
                - traefik.http.services.${STACK_NAME?Variable not set}-flower.loadbalancer.server.port=5555
    
    backend:
        ports:
            - "8888:8888"
        volumes:
            - ./backend:/backend
            - ${ROOT_DATA_FOLDER?Variable not set}:/data:ro
        image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
        depends_on:
            - db
        env_file:
            - .env
        environment:
            - SERVER_NAME=${DOMAIN?Variable not set}
            - SERVER_HOST=https://${DOMAIN?Variable not set}
            # Allow explicit env var override for tests
            - SMTP_HOST=${SMTP_HOST}
            # override
            - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
            - SERVER_HOST=http://${DOMAIN?Variable not set}
        build:
            context: ./backend
            dockerfile: backend.dockerfile
            args:
                INSTALL_DEV: ${INSTALL_DEV-true}
                INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
        # command: bash -c "while true; do sleep 1; done"  # Infinite loop to keep container live doing nothing
        command: /start-reload.sh
        labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
        - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80
        deploy:
            labels:
            - traefik.enable=true
            - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
            - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
            - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80
    


    celeryworker:
        image: '${DOCKER_IMAGE_CELERYWORKER?Variable not set}:${TAG-latest}'
        depends_on:
        - db
        - queue
        env_file:
        - .env
        volumes:
            - ./backend/app:/app
            - ${ROOT_DATA_FOLDER?Variable not set}:/data:ro
        environment:
            - SERVER_NAME=${DOMAIN?Variable not set}
            - RUN=celery worker -A app.worker -l info -Q main-queue -c 1
            - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
            - SERVER_HOST=http://${DOMAIN?Variable not set}
        build:
            context: ./backend
            dockerfile: celeryworker.dockerfile
            args:
                INSTALL_DEV: ${INSTALL_DEV-true}
                INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
        device_requests:
            - capabilities:
                - gpu
    
    frontend:
        image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
        build:
            context: ./frontend
            args:
                FRONTEND_ENV: ${FRONTEND_ENV-production}
        deploy:
        labels:
            - traefik.enable=true
            - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
            - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
            - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80
        environment:
            - DOMAIN=backend
        labels:
            - traefik.enable=true
            - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
            - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
            - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80
            
    dash_frontend:
        restart: always
        build:
            context: ./dash_frontend
        # command: bash -c "uvicorn app:index --host 0.0.0.0 --port 8000 --reload"
        command: bash -c "gunicorn -b :80 --reload app.index:server"
        # ports:
        #   - "8000:8000"
        environment:
            - API_DOMAIN=backend
        volumes:
            - ./dash_frontend:/app
            # read-only dataset folder
            - ${ROOT_DATA_FOLDER?Variable not set}:/data:ro
        labels:
            - traefik.enable=true
            - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
            - traefik.http.routers.${STACK_NAME?Variable not set}-dash-frontend-http.rule=PathPrefix(`/dash`)
            - traefik.http.services.${STACK_NAME?Variable not set}-dash-frontend.loadbalancer.server.port=80
         
            

volumes:
  app-db-data:

networks:
    traefik-public:
        # For local dev, don't expect an external Traefik network
        external: false
